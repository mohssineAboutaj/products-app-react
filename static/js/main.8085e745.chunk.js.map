{"version":3,"sources":["components/Rate.js","components/ProductItem.js","components/Products.js","App.js","serviceWorker.js","index.js"],"names":["Rate","stars","value","props","i","this","push","icon","faStar","className","key","Math","pow","far","Component","ProductItem","item","imgUrl","description","title","price","rate","id","src","alt","new","old","faCartPlus","Products","list","map","p","App","apiUrl","axiosOptions","method","headers","state","productList","componentDidMount","a","Axios","then","res","setState","data","catch","err","console","log","faReact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWA0BeA,E,2MAnBbC,MAAQ,G,EACRC,MAAQ,EAAKC,MAAMD,M,wEAGjB,IAAK,IAAIE,EAAI,EAAGA,GAAK,EAAGA,IAClBA,GAAKC,KAAKH,MACZG,KAAKJ,MAAMK,KACT,kBAAC,IAAD,CAAiBC,KAAMC,IAAQC,UAAU,cAAcC,IAAKC,KAAKC,IAAIP,KAAKH,MAAOE,MAGnFC,KAAKJ,MAAMK,KACT,kBAAC,IAAD,CAAiBC,KAAMM,IAAYJ,UAAU,OAAOC,IAAKC,KAAKC,IAAIP,KAAKH,MAAOE,MAIpF,OAAOC,KAAKJ,U,GAhBGa,aCqCJC,E,iLArCH,IAAD,EAC6CV,KAAKF,MAAMa,KAAvDC,EADD,EACCA,OAAQC,EADT,EACSA,YAAaC,EADtB,EACsBA,MAAOC,EAD7B,EAC6BA,MAAOC,EADpC,EACoCA,KACrCC,EAAKjB,KAAKF,MAAMmB,GAEtB,OACE,yBAAKb,UAAU,4CACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cAAcc,IAAKN,EAAQO,IAAKL,IAC/C,yBAAKV,UAAU,gBACb,wBAAIA,UAAU,iBAAiBU,GAC/B,yBAAKV,UAAU,iBACb,0BAAMA,UAAU,qBAAhB,KACKW,EAAMK,KAEX,0BAAMhB,UAAU,qBAAhB,KACKW,EAAMM,MAGb,yBAAKjB,UAAU,gBACb,kBAAC,EAAD,CAAMP,MAAOmB,EAAMX,IAAKY,KAE1B,yBAAKb,UAAU,uBACZS,GAEH,yBAAKT,UAAU,eACb,gCACE,kBAAC,IAAD,CAAiBF,KAAMoB,IAAYlB,UAAU,SAD/C,uB,GA1BYK,aCaXc,E,iLAbX,OACE,yBAAKnB,UAAU,sBACb,yBAAKA,UAAU,OACXJ,KAAKF,MAAM0B,KAAKC,KAAI,SAACC,EAAG3B,GACtB,OAAO,kBAAC,EAAD,CAAaM,IAAKN,EAAGY,KAAMe,EAAGT,GAAIlB,a,GANhCU,a,yBCyCRkB,E,2MAnCbC,OAAS,mE,EACTC,aAAe,CACbC,OAAQ,MACRC,QAAQ,CACN,eAAgB,qB,EAIpBC,MAAQ,CACNC,YAAa,I,EAGfC,kB,sBAAoB,sBAAAC,EAAA,sEACZC,IACJ,EAAKR,OACL,EAAKC,cACLQ,MAAK,SAAAC,GACL,EAAKC,SAAS,CAAEN,YAAaK,EAAIE,UAChCC,OAAM,SAAAC,GACPC,QAAQC,IAAIF,MAPI,2C,wEAYlB,OACE,yBAAKtC,UAAU,OACb,wCACW,kBAAC,IAAD,CAAiBF,KAAM2C,IAASzC,UAAU,SADrD,QAGA,kBAAC,EAAD,CAAUoB,KAAMxB,KAAKgC,MAAMC,mB,GA9BjBxB,aCIEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.8085e745.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport * as far from '@fortawesome/free-regular-svg-icons'\n\nclass Rate extends Component {\n  stars = [];\n  value = this.props.value\n\n  render() {\n    for (let i = 1; i <= 5; i++) {\n      if (i <= this.value) {\n        this.stars.push(\n          <FontAwesomeIcon icon={faStar} className=\"icon active\" key={Math.pow(this.value, i)} />\n        )\n      } else {\n        this.stars.push(\n          <FontAwesomeIcon icon={far.faStar} className=\"icon\" key={Math.pow(this.value, i)} />\n        )\n      }\n    }\n    return this.stars\n  }\n}\n\nexport default Rate;","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCartPlus } from '@fortawesome/free-solid-svg-icons'\nimport Rate from './Rate'\n\nclass ProductItem extends Component {\n  render() {\n    const { imgUrl, description, title, price, rate } = this.props.item;\n    const id = this.props.id;\n\n    return (\n      <div className=\"grid-12-sm grid-6-md grid-4-lg grid-3-xl\">\n        <div className=\"product-card\">\n          <img className=\"product-img\" src={imgUrl} alt={title} />\n          <div className=\"product-info\">\n            <h3 className=\"product-title\">{title}</h3>\n            <div className=\"product-price\">\n              <span className=\"product-price-new\">\n                $ {price.new}\n              </span>\n              <span className=\"product-price-old\">\n                $ {price.old}\n              </span>\n            </div>\n            <div className=\"product-rate\">\n              <Rate value={rate} key={id} />\n            </div>\n            <div className=\"product-description\">\n              {description}\n            </div>\n            <div className=\"product-btn\">\n              <button>\n                <FontAwesomeIcon icon={faCartPlus} className=\"icon\" />\n                add to cart\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ProductItem","import React, { Component } from 'react'\nimport ProductItem from './ProductItem'\n\nclass Products extends Component {\n  render() {\n    return (\n      <div className=\"products-component\">\n        <div className=\"row\">\n          { this.props.list.map((p, i) => {\n              return <ProductItem key={i} item={p} id={i} />\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Products\n","import React, { Component } from 'react'\nimport '@mohssineaboutaj/grid-system/css/grid-system.min.css';\nimport './App.css';\nimport Products from './components/Products'\nimport Axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faReact } from '@fortawesome/free-brands-svg-icons';\n\nclass App extends Component {\n  apiUrl = \"https://my-json-server.typicode.com/mohssineAboutaj/api/products\"\n  axiosOptions = {\n    method: 'GET',\n    headers:{\n      'Content-Type': 'application/json',\n    },\n  }\n\n  state = {\n    productList: [],\n  }\n\n  componentDidMount = async () => {\n    await Axios(\n      this.apiUrl,\n      this.axiosOptions,\n    ).then(res => {\n      this.setState({ productList: res.data });\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>\n          Products <FontAwesomeIcon icon={faReact} className=\"icon\" /> App\n        </h1>\n        <Products list={this.state.productList} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}